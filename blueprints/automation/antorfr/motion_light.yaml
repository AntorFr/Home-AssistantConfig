blueprint:
  name: Smart Light
  description: Turn on a light when motion is detected if needed.
  domain: automation
  input:
    light_target:
      name: Target light
      description: The light to turn on when the automation is triggered.
      selector:
        target:
          entity:
            domain: light
    motion_sensor:
      name: Motion Sensor
      description: This sensor will trigger the turning on of the target entity.
      selector:
        entity:
          domain: binary_sensor
          device_class: motion      
    no_motion_wait:
      name: Wait time (sec)
      description: Time to leave the light on after last motion is detected.
      selector:
        duration:
          #enable_days: false
      default:
        minutes: 2
    #toggle_devices:
    #  name: (Not implemented yet) toggle devices.
    #  description: list of device to manually trigger a light toggle
    #  selector:
    #    entity:
    #      #multiple: true
    #      domain: binary_sensor
    #      device_class: motion       
    no_motion_warning:
      name: (OPTIONAL) Warning time (sec)
      description: Waring duration of reduce brightness before turning it off (0 means no warning).
      default: 30
      selector:
        number:
          min: 0
          max: 60
          unit_of_measurement: seconds
    light_sensor:
      name: (OPTIONAL) Illuminance sensor
      description: This sensor will be used to determine the illumination.
      default:
      selector:
        entity:
          domain: sensor
          device_class: illuminance
    lux_cutoff:
      name: (OPTIONAL) Illuminance cutoff value
      description: minimum brightness that is triggering.
      default: 
      selector:
        number:
          min: 0
          max: 1000
          unit_of_measurement: lux
    only_during_night:
      name: (OPTIONAL) Only turn light on at night
      description: Only turn light on when when sun is below horizon.
      default: false
      selector:
        boolean:
    only_turn_off:
      name: (OPTIONAL) Only turn light off
      description: Only turn light off when no more motion, but never on
      default: false
      selector:
        boolean:
    adaptive_lighting:
      name: (OPTIONAL) Adaptive lighting switch
      description: use adaptive lighting mode if enabled
      default: 
      selector:
        entity:
          integration: adaptive_lighting
          domain: switch
    kill_switch:
      name: (OPTIONAL) Disable automatic turn on/off
      description: input boolean to disable automatic turn on/off if ON
      default: 
      selector:
        entity:
          domain: input_boolean

# If motion is detected within the delay,
# we restart the script.
mode: restart
max_exceeded: silent

variables:
  light_target: !input 'light_target'
  motion_sensor: !input 'motion_sensor'
  no_motion_wait: !input 'no_motion_wait'
  no_motion_warning: !input 'no_motion_warning'
  light_sensor: !input 'light_sensor'
  lux_cutoff: !input 'lux_cutoff'
  adaptive_lighting: !input 'adaptive_lighting'
  only_during_night: !input 'only_during_night'
  only_turn_off: !input 'only_turn_off'
  kill_switch_id: !input 'kill_switch'

  no_motion_wait_sec: '{{ ((no_motion_wait.hours or 0)*3600+(no_motion_wait.minutes or 0)*60+(no_motion_wait.seconds or 0))|int}}'
  warning_disable: '{{ (no_motion_warning==0) or (no_motion_warning>=no_motion_wait_sec)}}'
  duration_before_warning: '{{ (no_motion_wait_sec - no_motion_warning) }}'
  illinance_disable: '{{(light_sensor==none) or (lux_cutoff==none)}}'
  night_only_disable: "{{not only_during_night}}"
  turn_on_disable: '{{only_turn_off}}'
  light_entities: >
    {%- set ns = namespace(light_entities=[]) %}

    {%- if light_target.entity_id is not none %}
    {%- set entity_ids = iif(light_target.entity_id is string,[light_target.entity_id],light_target.entity_id) %}
    {%- set entity_light_ids = entity_ids|select('match','^light\..*')| list %}
    {%- set ns.light_entities =  entity_light_ids|unique|list%}
    {%- endif %}

    {%- if light_target.area_id is not none %}
    {%- set area_ids = iif(light_target.area_id is string,[light_target.area_id],light_target.area_id) %}
    {%- for area in light_target.area_id %}
    {%- set area_light_ids = area_entities(area)|select('match','^light\..*') | list %}
    {%- set ns.light_entities =  (ns.light_entities + area_light_ids)|unique|list%}
    {%- endfor %}
    {%- endif %}

    {%- if light_target.device_id is not none %}
    {%- set device_ids = iif(light_target.device_id is string,[light_target.device_id],light_target.device_id) %}
    {%- for device in device_ids %}
    {%- set device_light_ids = device_entities(device)|select('match','^light\..*') | list %}
    {%- set ns.light_entities =  (ns.light_entities + device_light_ids)|unique|list%}
    {%- endfor %}
    {%- endif %}

    {{ns.light_entities}}

  kill_switch_active: >
    {% if kill_switch_id is none %}
      False
    {%else%}
      {{is_state(kill_switch_id, "on")}}
    {%endif%}


trigger:
  - platform: state
    entity_id: !input motion_sensor
    to: "on"
    id: "on"
  - platform: state
    entity_id: !input motion_sensor
    to: "off"
    id: "warning"
  - platform: state
    entity_id: !input motion_sensor
    to: "off"
    for: !input 'no_motion_wait'
    id: "off"

condition:
  - condition: and
    conditions: 
    - alias: "Kill switch is not enabled or off"
      condition: template
      value_template: '{{not (kill_switch_active)}}'
    - condition: or
      conditions:
        - alias: "no more movement since configured period"
          condition: trigger
          id: 'off'
        - condition: and
          conditions:  
            - alias: "turn on enabled"
              condition: template
              value_template: >
                {{ 
                  not (turn_on_disable)
                }} 
            - alias: "night only disable or sun is down"
              condition: template
              value_template: >
                {{ 
                  (night_only_disable) or 
                  (is_state("sun.sun","below_horizon"))
                }}     
            - alias: "illinance disable or illinance lower than thershold or any entity id is on" 
              condition: template
              value_template: >
                {{ 
                    (illinance_disable) or
                    (states(light_sensor)|int <= lux_cutoff) or
                    (expand(light_entities) | selectattr("state", "eq", "on") | list | count > 0)
                }}


action:
- choose:
  - conditions:
    - condition: trigger
      id: 'on'
    sequence:
    - choose:
      - conditions: '{{is_state(adaptive_lighting,"on")}}'
        sequence:
        - service: adaptive_lighting.apply
          entity_id: !input 'adaptive_lighting'
          data:
            lights: '{{light_entities}}'
            turn_on_lights: true
      default:
          - service: light.turn_on
            target: !input 'light_target'
            data:
              brightness_pct: 100
  - conditions:
    - condition: trigger
      id: 'warning'
    - condition: template
      value_template: "{{not(warning_disable)}}"
    sequence:
      - wait_template: '{{ expand(motion_sensor) | selectattr("state", "eq", "on") | list | count == 0 }}'
      - delay: 
          seconds: '{{duration_before_warning}}'
      - condition: template
        alias: "kill scenario if kill_switch has been activated"
        value_template: '{{not (kill_switch_active)}}'
      # TODO: Debug why never reach next step         
      #- wait_for_trigger:
      #  - platform: template
      #    value_template: '{{ expand(motion_sensor) | selectattr("state", "eq", "on") | list | count == 0 }}'
      #    for:
      #      seconds: "{{duration_before_warning}}"
      - if:
        - alias: "any light still on" 
          condition: template
          value_template: '{{ expand(light_entities) | selectattr("state", "eq", "on") | list | count > 0 }}'
        then:
          - service: light.turn_on
            target:
              entity_id: '{{expand(light_entities) | selectattr("state", "eq", "on") | map(attribute="entity_id")| list}}'
            data:
              brightness_step_pct: -50
  - conditions:
    - condition: trigger
      id: 'off'
    sequence:
      - wait_template: '{{ expand(motion_sensor) | selectattr("state", "eq", "on") | list | count == 0 }}'
      # TODO: Debug why never reach next step 
      #- wait_for_trigger:
      #  - platform: template
      #    value_template: '{{ expand(motion_sensor) | selectattr("state", "eq", "on") | list | count == 0 }}'
      #    for:
      #      seconds: "{{no_motion_wait}}"
      - service: light.turn_off
        target: !input 'light_target'


