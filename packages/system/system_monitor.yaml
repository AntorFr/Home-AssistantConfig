---
### Monitor system ###

sensor:
  - platform: systemmonitor
    resources:
      - type: disk_use_percent
        arg: /config
      - type: memory_free
      - type: load_1m
      - type: load_5m
      - type: load_15m

automation:
################################################################################
- id: system_notification_update
  alias: 'System - Notification - Update Available'
  # initial_state: 'on'
  trigger:
    platform: state
    entity_id: updater.updater
# TODO: Condition on verified config
#  homeassistant check = 'ok'
#  condition:
#    condition: template
#    value_template: >
#      {{ true }}
  action:
    service: notify.mobile_seb
    data:
      message: 'Un mise à jour est disponible pour Home Assistant.'
################################################################################

################################################################################
- id: system_notification_new_device
  alias: 'System - Notification - New Device'
  # initial_state: 'on'
  trigger:
    - platform: event
      event_type: device_tracker_new_device
  action:
    - service: notify.mobile_seb
      data_template:
        message: >
          Home Assistant a découvert un nouvel appareil:
          {{trigger.event.data.entity_id}}
        title: Nouvel appareil
################################################################################
- id: system_notification_restart
  alias: 'System - Notification - Home Assistant Restart'
  #initial_state: 'off'
  trigger:
    platform: homeassistant
    event: start
  action:
    service: notify.mobile_seb
    data:
      message: 'Home Assistant a redémarré.'
################################################################################
- id: system_notification_automation hacs_updates
  alias: 'System - Notification - HACS updates pending'
  trigger:
    platform: state
    entity_id: sensor.hacs
  condition:
    - condition: template
      value_template: "{{ states(trigger.entity_id) != 'unknown'}}"
    - condition: template
      value_template: "{{ (states(trigger.entity_id) | float) != 0}}"
  action:
    service: persistent_notification.create
    data_template:
      title: Updates pending in HACS
      notification_id: hacs-update
      message: >-
        {% for repo in state_attr(trigger.entity_id, 'repositories') %}
          **{{ repo.display_name }}** _{{ repo["installed_version"] }}_ -> _{{ repo["available_version"] }}_
        {% endfor %}